lesson_name("Playbook conditionals")
make_and_go_ws
clear_ws
run(`cp /tutorials/files/step-7/hosts hosts`)
run(`cp -r /tutorials/files/step-7/files files`)

"`Using conditionals`"

"We've installed apache, pushed our virtualhost and restarted the server. But we want to revert things to a stable state if something goes wrong."

"`Reverting when things go wrong`"

"A word of warning: there's no magic here. The previous error was not ansible's fault. It's not a backup system, and it can't rollback all things. It's your job to make sure your playbooks are safe. Ansible just doesn't know how to revert the effects of `a2ensite awesome-app`."

"But if we care to do it, it's well within our reach."

"As said, when a task fails, processing stops... unless we accept failure (and we should). This is what we'll do: continue processing if there is a failure but only to revert what we've done."

run(`cp /tutorials/files/step-7/apache.yml apache.yml`)

"First inspect our playbook by running:"

"*cat apache.yml*"

prompt {
    if success && command == "cat apache.yml" {
        expect ("cat apache.yml")
        ""
        break
    }
} 

"The `register` keyword records output from the `apache2ctl configtest` command (exit status, stdout, stderr, ...), and `when: result|failed` checks if the registered variable (`result`) contains a failed status."

"Here we go! Run the following command to execute our playbook:"

"*ansible-playbook -i hosts -l host1.example.org apache.yml*"

prompt {
    if ! success && command == "ansible-playbook -i hosts -l host1.example.org apache.yml" {
        expect ("ansible-playbook -i hosts -l host1.example.org apache.yml")
        ""
        "Seemed to work as expected." 
        break
    }
} 

"Let's try to restart apache to see if it really worked, but how? Of course with ansible :)"

"Run the following command:"

"*ansible -i hosts -m service -a 'name=apache2 state=restarted' host1.example.org*"

prompt {
    if success && command == "ansible -i hosts -m service -a 'name=apache2 state=restarted' host1.example.org" {
        expect ("ansible -i hosts -m service -a 'name=apache2 state=restarted' host1.example.org")
        ""
        "Ok, now our apache is safe from misconfiguration here." 
        break
    }
} 

"While this sounds like a lot of work, it isn't. Remember you can use variables almost everywhere, so it's easy to make this a general playbook for apache, and use it everywhere to deploy your virtualhosts. Write it once, use it everywhere."

"We'll do that in lesson 10 but for now, let's deploy our web site using git in the next lesson."

"This is the end of this lesson!"

"Please press the \"`Enter`\" key to continue!"
prompt {
    if command == "" {
        expect (" ")
        break
    }
}