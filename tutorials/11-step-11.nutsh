lesson_name("Variables again")
make_and_go_ws
clear_ws
run(`cp -r /tutorials/files/step-11/* .`)

"`Variables again`"

"So we've setup our loadbalancer, and it works quite well. We grabbed variables from facts and used them to build the configuration. But Ansible also supports other kinds of variables. We already saw `ansible_host` in inventory, but now we'll use variables defined in `host_vars` and `group_vars` files."

"`Fine tuning our HAProxy configuration`"

"HAProxy usually checks if the backends are alive. When a backend seems dead, it is removed from the backend pool and HAproxy doesn't send requests to it anymore."

"Backends can also have different weights (between 0 and 256). The higher the weight, the higher number of connections the backend will receive compared to other backends. It's useful to spread traffic more appropriately if nodes are not equally powerful."

"We'll use variables to configure all these parameters."

"Please press the \"`Enter`\" key to continue!"
prompt {
    if command == "" {
        expect (" ")
        break
    }
}

"`Group vars`"

"The check interval will be set in a group_vars file for haproxy. This will ensure all haproxies will inherit from it."

"We just need to create the file `group_vars/haproxy` below the inventory directory. The file has to be named after the group you want to define the variables for. If we wanted to define variables for the web group, the file would be named `group_vars/web`."

print("\t
haproxy_check_interval: 3000\n\t
haproxy_stats_socket: /tmp/sock\n\t
")

"The name is arbitrary. Meaningful names are recommended of course, but there is no required syntax. You could even use complex variables (a.k.a. Python dict) like this:"

print("\t
haproxy:\n\t
    check_interval: 3000\n\t
    stats_socket: /tmp/sock\n\t
")

"This is just a matter of taste. Complex vars can help group stuff logically. They can also, under some circumstances, merge subsequently defined keys (note however that this is not the default ansible behaviour). For now we'll just use simple variables."

"Please press the \"`Enter`\" key to continue!"
prompt {
    if command == "" {
        expect (" ")
        break
    }
}

"`Hosts vars`"

"Hosts vars follow exactly the same rules, but live in files under `host_vars` directory."

"Let's define weights for our backends in host_vars/host1.example.com:"

print("\t
haproxy_backend_weight: 100\n\t
")

"and `host_vars/host2.example.com:`"

print("\t
haproxy_backend_weight: 150\n\t
")

"If we'd define `haproxy_backend_weight` in `group_vars/web`, it would be used as a 'default': variables defined in `host_vars` files overrides varibles defined in `group_vars`."

"Now, you can analyse the workspace: `group_vars`, `host_vars` directories and files inside"

"Once you're done, simply press the \"`Enter`\" key to continue!"

prompt {
    if command == "" {
        expect (" ")
        break
    }
}

"`Updating the template`"

"The template must be updated to use these variables."

"Inspect the template file by running the following command:"

"*cat templates/haproxy.cfg.j2*"

prompt {
    if success && command == "cat templates/haproxy.cfg.j2" {
        expect ("cat templates/haproxy.cfg.j2")
        ""
        "Note that we also introduced an `{% if ...` block. This block enclosed will only be rendered if the test is true. So if we define `haproxy_stats_socket` somewhere for our loadbalancer (we might even use the `--extra-vars=\"haproxy_stats_sockets=/tmp/sock\"` at the command line), the enclosed line will appear in the generated configuration file (note that the suggested setup is highly insecure!)."
        break
    }
} 

"Note that, while we could, it's not necessary to run the apache playbook since nothing changed, but we had to cheat a bit for that."

"See the updated haproxy playbook by running:"

"*cat haproxy.yml*"

prompt {
    if success && command == "cat haproxy.yml" {
        expect ("cat haproxy.yml")
        ""
        "See? We added an empty play for web hosts at the top. It does nothing. But it's here because it will trigger facts gathering on hosts in group `web`. This is required because the haproxy playbook needs to pick facts from hosts in this group. If we don't do this, ansible will complain saying that `ansible_eth0` key doesn't exist."
        break
    }
} 

"Let's go!" 
"Run the following command to execute the playbook:"

"*ansible-playbook -i hosts haproxy.yml*"

prompt {
    if success && command == "ansible-playbook -i hosts haproxy.yml" {
        expect ("ansible-playbook -i hosts haproxy.yml")
        "" 
        "Great!" 
        break
    }
}


"Now on to the next lesson about \"Migrating to Roles!\"."

"This is the end of this lesson!"

"Please press the \"`Enter`\" key to continue!"
prompt {
    if command == "" {
        expect (" ")
        break
    }
}