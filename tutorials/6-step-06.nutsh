lesson_name("Playbooks and failures")
make_and_go_ws
clear_ws
run(`cp /tutorials/files/step-6/hosts hosts`)

"`Restarting when config is correct`"

"We've installed apache, pushed our virtualhost and restarted the server. But what if we wanted the playbook to restart the server only if the config is correct? Let's do that."

"`Bailing out when things go wrong`"

"Ansible has a nifty feature: it will stop all processing if something goes wrong. We'll take advantage of this feature to stop our playbook if the config file is not valid."

run(`cp -r /tutorials/files/step-6/files files`)

"I've just changed our awesome-app virtual host configuration file and broken it."

"See the broken config by running the following command:"

"*cat files/awesome-app*"

prompt {
    if success && command == "cat files/awesome-app" {
        expect ("cat files/awesome-app")
        ""
        "RocumentDoot instead of DocumentRoot :)"
        break
    }
} 

"As said, when a task fails, processing stops. So we'll ensure that the configuration is valid before restarting the server. We also start by adding our virtualhost `before` removing the default virtualhost, so a subsequent restart (possibly done directly on the server) won't break apache."

"Note that we should have done this in the first place. Since we ran our playbook already, the default virtualhost is already deactivated. Nevermind: this playbook might be used on other innocent hosts, so let's protect them."

run(`cp /tutorials/files/step-6/apache.yml apache.yml`)

"Inspect our playbook by running:"

"*cat apache.yml*"

prompt {
    if success && command == "cat apache.yml" {
        expect ("cat apache.yml")
        ""
        break
    }
} 

"Here we go! Run the following command to execute our playbook:"

"*ansible-playbook -i hosts -l host1.example.org apache.yml*"

prompt {
    if ! success && command == "ansible-playbook -i hosts -l host1.example.org apache.yml" {
        expect ("ansible-playbook -i hosts -l host1.example.org apache.yml")
        ""
        "As you can see since `apache2ctl` returns with an exit code of 1 when it fails, ansible is aware of it and stops processing. Great!" 
        break
    }
} 

"Mmmh, not so great in fact... Our virtual host has been added anyway. Any subsequent apache restart will complain about our config and bail out. So we need a way to catch failures and revert back."

"Lets do that in the next lesson."

"This is the end of this lesson!"

"Please press the \"`Enter`\" key to continue!"
prompt {
    if command == "" {
        expect (" ")
        break
    }
}